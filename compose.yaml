# This docker compose is for testing a real production env locally..
# Simulates a network etc.
version: '3.7'

services:
  # ----- GENERAL SERVICES -------
  service_mq:
    image: rabbitmq:3.13-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - microservices
    # ports:
    #   - "5672:5672"
    #   - "15672:15672"

  service_redis:
    image: redis:latest
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - microservices
    # ports:
    #   - "6379:6379"

  # ----- JOBS MICROSERVICE -------
  service_jobs:
    image: ahmad45123/workup:service_jobs
    depends_on:
      - jobs_db
      - service_mq
    networks:
      - microservices

  # ----- PAYMENTS MICROSERVICE -------
  service_payments:
    image: ahmad45123/workup:service_payments
    depends_on:
      - payments_db
      - service_mq
      - service_redis
    networks:
      - microservices

  # ----- PAYMENTS MICROSERVICE -------
  service_contracts:
    image: ahmad45123/workup:service_contracts
    depends_on:
      - contracts_db
      - service_mq
    networks:
      - microservices
      
  jobs_db:
    image: cassandra:4.0.7
    volumes:
      - ./services/jobs/cassandra-config/cassandra.yaml:/etc/cassandra/cassandra.yaml
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 20s
      timeout: 10s
      retries: 60

  contracts_db:
    image: cassandra:4.0.7
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 20s
      timeout: 10s
      retries: 60

  payments_db:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: payments_password
      POSTGRES_USER: payments_user
      POSTGRES_DB: payments_database

    healthcheck:
      test:  ["CMD", "pg_isready"]
      interval: 20s
      timeout: 10s
      retries: 10

networks:
  microservices:
    driver: overlay
